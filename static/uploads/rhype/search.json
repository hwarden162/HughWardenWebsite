[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"/LICENSE.html","id":"0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"/LICENSE.html","id":"1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"/LICENSE.html","id":"2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"/LICENSE.html","id":"3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"/LICENSE.html","id":"4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"/LICENSE.html","id":"5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"/LICENSE.html","id":"6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"/LICENSE.html","id":"7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"/LICENSE.html","id":"8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"/LICENSE.html","id":"9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"/LICENSE.html","id":"10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"/LICENSE.html","id":"11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"/LICENSE.html","id":"12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"/LICENSE.html","id":"13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"/LICENSE.html","id":"14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"/LICENSE.html","id":"15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"/LICENSE.html","id":"16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"/LICENSE.html","id":"17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Hugh Warden. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Warden H (2022). rhype: Work Hypergraphs R. R package version 0.3.0.","code":"@Manual{,   title = {rhype: Work with Hypergraphs in R},   author = {Hugh Warden},   year = {2022},   note = {R package version 0.3.0}, }"},{"path":"/index.html","id":"rhype","dir":"","previous_headings":"","what":"Work with Hypergraphs in R","title":"Work with Hypergraphs in R","text":"Introduction Installation Weighting Orientation Real Coefficients Combining Extra Features hypergraphs hyperedge Lists hypergraphs Incidence Matrices Number Vertices - numv hyperedge List - elist Vertex Names - vnames Vertex Weights - vweights hyperedge Names - enames hyperedge Weights - eweights Weighted - weighted Oriented - oriented Directed - directed Real Coefficients - real_coef Incidence Matrix - inc_mat","code":""},{"path":"/index.html","id":"introduction","dir":"","previous_headings":"","what":"Introduction","title":"Work with Hypergraphs in R","text":"underlying philosophy rhype pass data function transform hypergraph object can passed functions perform manipulations calculations. means hypergraph object created, processing data needed carry operation. hopefully allows users easily implement hypergraph based techniques workflows minimal technical skill required. However, users greater technical skillset, able work directly R6 hypergraph object allowing operations manipulations may prohibited functions. users directed hypergraph Objects section depth explanation.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Work with Hypergraphs in R","text":"development version rhype available GitHub :","code":"#install.packages(\"devtools\") devtools::install_github(\"hwarden162/rhype\")"},{"path":"/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting Started","title":"Work with Hypergraphs in R","text":"first thing create hypergraph object. hypergraph objects can created data, example_hype() function can used create many different types hypergraphs useful exploring rhype. Just typing name hypergraph give short summary structure. quickly get depth overview hypergraph use hype_info() function can generate rather long sections text bigger hypergraphs whole sections output can omitted passing different values However, many settings set false recommended user just call section structure individually investigate. hype1 example basic hypergraph. rhype allows three ways augment hypergraph: weighting, orientation real coefficients.","code":"library(rhype)  hype1 <- example_hype() hype1 #> Hypergraph Object:  #>     Number of vertices:  4  #>     Number of hyperedges:  2  #>     Oriented:  FALSE    Directed:  FALSE  #>     Real Coefficients:  FALSE    Weighted:  FALSE hype_info(hype1) #> ====================HYPERGRAPH INFORMATION==================== #>  #> --------------------VERTEX INFORMATION-------------------- #>  #> This hypergraph has  4  vertices #>  #> These vertices are called: #>  v1, v2, v3, v4  #>  #> --------------------HYPEREDGE INFORMATION-------------------- #>  #> The hyperedges are called: #>  h1, h2  #>  #> The hyperedges have the structure: #> $h1 #> [1] 1 2 3 #>  #> $h2 #> [1] 2 3 4 #>  #> ---------------WEIGHTING INFORMATION-------------------- #>  #> This hypergraph is not weighted #>  #> --------------------Orientation Information-------------------- #>  #> This hypergraph is not oriented #>  #> This hypergraph is not directed #>  #> --------------------REAL COEFFICIENTS INFORMATION-------------------- #>  #> This hypergraph does not have real coefficients associating vertices to hyperedges #>  #> There is no incidence matrix associating vertices to hyperedges with non-binary coefficients hype_info(hype1, weighted = FALSE, oriented = FALSE, real_coef = FALSE) #> ====================HYPERGRAPH INFORMATION==================== #>  #> --------------------VERTEX INFORMATION-------------------- #>  #> This hypergraph has  4  vertices #>  #> These vertices are called: #>  v1, v2, v3, v4  #>  #> --------------------HYPEREDGE INFORMATION-------------------- #>  #> The hyperedges are called: #>  h1, h2  #>  #> The hyperedges have the structure: #> $h1 #> [1] 1 2 3 #>  #> $h2 #> [1] 2 3 4"},{"path":"/index.html","id":"weighting","dir":"","previous_headings":"","what":"Weighting","title":"Work with Hypergraphs in R","text":"Weights can applied vertices hyperedges. hype2 example weighted hypergraph hyperedge weightings change way information flows hypergraph effect almost every calculation done rhype. Vertex weightings currently used rhype functions except store hyperedge weightings dual hypergraphs. However, likely change, efforts made changes affect previously written code may possible/feasible.","code":"hype2 <- example_hype(vertex_weighted = TRUE, edge_weighted = TRUE)  hype_info(hype2, oriented = FALSE, real_coef = FALSE) #> ====================HYPERGRAPH INFORMATION==================== #>  #> --------------------VERTEX INFORMATION-------------------- #>  #> This hypergraph has  4  vertices #>  #> These vertices are called: #>  v1, v2, v3, v4  #>  #> --------------------HYPEREDGE INFORMATION-------------------- #>  #> The hyperedges are called: #>  h1, h2  #>  #> The hyperedges have the structure: #> $h1 #> [1] 1 2 3 #>  #> $h2 #> [1] 2 3 4 #>  #> ---------------WEIGHTING INFORMATION-------------------- #>  #> This hypergraph is weighted #>  #> The hyperedges have weights: #> h1 h2  #>  1  2  #>  #> The vertices have weights: #> v1 v2 v3 v4  #>  1  2  3  4"},{"path":"/index.html","id":"orientation","dir":"","previous_headings":"","what":"Orientation","title":"Work with Hypergraphs in R","text":"Orientations can applied hyperedges. creates two groups within hyperedge information can travel across hyperedge vertex one group vertex group. hype3 example oriented hypergraph hyperedge information section, can seen hyperedge now two groups, representing two different ends hyperedge. hyperedges can directed information can flow across hyperedge one specific end Now looking hyperedge information, can seen naming groups hyperedge dedicated set vertices information can flow dedicated set vertices information can flow . Vertices can part ends oriented/directed hyperedge, sometimes referred catalytic resepect hyperedge. important rule remember directed hypergraphs must oriented oriented hypergraphs directed.","code":"hype3 <- example_hype(oriented = TRUE) hype_info(hype3, weighted = FALSE, real_coef = FALSE) #> ====================HYPERGRAPH INFORMATION==================== #>  #> --------------------VERTEX INFORMATION-------------------- #>  #> This hypergraph has  4  vertices #>  #> These vertices are called: #>  v1, v2, v3, v4  #>  #> --------------------HYPEREDGE INFORMATION-------------------- #>  #> The hyperedges are called: #>  h1, h2  #>  #> The hyperedges have the structure: #> $h1 #> $h1[[1]] #> [1] 1 2 #>  #> $h1[[2]] #> [1] 3 4 #>  #>  #> $h2 #> $h2[[1]] #> [1] 2 3 4 #>  #> $h2[[2]] #> [1] 1 2 #>  #>  #> --------------------Orientation Information-------------------- #>  #> This hypergraph is oriented #>  #> This hypergraph is not directed hype4 <- example_hype(oriented = TRUE, directed = TRUE) hype_info(hype4, weighted = FALSE, real_coef = FALSE) #> ====================HYPERGRAPH INFORMATION==================== #>  #> --------------------VERTEX INFORMATION-------------------- #>  #> This hypergraph has  4  vertices #>  #> These vertices are called: #>  v1, v2, v3, v4  #>  #> --------------------HYPEREDGE INFORMATION-------------------- #>  #> The hyperedges are called: #>  h1, h2  #>  #> The hyperedges have the structure: #> $h1 #> $h1$from #> [1] 1 2 #>  #> $h1$to #> [1] 3 4 #>  #>  #> $h2 #> $h2$from #> [1] 2 3 4 #>  #> $h2$to #> [1] 1 2 #>  #>  #> --------------------Orientation Information-------------------- #>  #> This hypergraph is oriented #>  #> This hypergraph is directed"},{"path":"/index.html","id":"real-coefficients","dir":"","previous_headings":"","what":"Real Coefficients","title":"Work with Hypergraphs in R","text":"Real coefficients can seen extension weightings. real coefficient can used connect vertex hyperedge certain weight. useful sometimes may want two vertices member hyperedge, one vertices twice important within hyperedge . Therefore, vertex can connected specifically hyperedge coefficient twice big ’s. bottom printout hype5 incidence matrix can seen, can essentially viewed table shows strongly connected vertex (row) connected hyperedge (column). vertex considered member hyperedge respective entry matrix 0. However, soft assumption real coefficients non-negative. Although possible put negative values real coefficients, many occasions one may want , done great care. Negative coefficients can cause many problems, expecially calculating hypergraph matrices rhypepaths vertices. calculating adjacency coefficient two vertices, negative numbers means can sum 0. mean vertices considered adjacent (even though ). rhype check manual checking necessary.","code":"hype5 <- example_hype(real_coef = TRUE) hype_info(hype5, weighted = FALSE, oriented = FALSE) #> ====================HYPERGRAPH INFORMATION==================== #>  #> --------------------VERTEX INFORMATION-------------------- #>  #> This hypergraph has  4  vertices #>  #> These vertices are called: #>  v1, v2, v3, v4  #>  #> --------------------HYPEREDGE INFORMATION-------------------- #>  #> The hyperedges are called: #>  h1, h2  #>  #> The hyperedges have the structure: #> $h1 #> [1] 1 2 3 #>  #> $h2 #> [1] 2 3 4 #>  #> --------------------REAL COEFFICIENTS INFORMATION-------------------- #>  #> This hypergraph has real coefficients associating vertices to hyperedges #>  #> The incidence matrix associating vertices to hyperedges is given by: #>    h1 h2 #> v1  1  0 #> v2  2  2 #> v3  3  3 #> v4  0  4"},{"path":"/index.html","id":"combining-extra-features","dir":"","previous_headings":"","what":"Combining Extra Features","title":"Work with Hypergraphs in R","text":"hypergraph weighting, orientation real coefficients can combined together model complicated systems feature interact together, orientations restricting movement information across hyperedges, weightings changing information moves globally hyperedges vertices real coefficients changing information moves locally specific vertices specific hyperedges. efforts made make rhype flexible possible. However, although modelling extremely flexible functions able take forms rhypegaphs, stated documentation error message execution attempted. reason either computation complex finished yet, maths governing calculation yet finished. function work particular use like, please raise GitHub Repo move job higher list features add.","code":"hype6 <- example_hype(   oriented = TRUE,    directed = TRUE,   vertex_weighted = TRUE,   edge_weighted = TRUE,   real_coef = TRUE   ) hype_info(hype6) #> ====================HYPERGRAPH INFORMATION==================== #>  #> --------------------VERTEX INFORMATION-------------------- #>  #> This hypergraph has  4  vertices #>  #> These vertices are called: #>  v1, v2, v3, v4  #>  #> --------------------HYPEREDGE INFORMATION-------------------- #>  #> The hyperedges are called: #>  h1, h2  #>  #> The hyperedges have the structure: #> $h1 #> $h1$from #> [1] 1 2 #>  #> $h1$to #> [1] 3 4 #>  #>  #> $h2 #> $h2$from #> [1] 2 3 4 #>  #> $h2$to #> [1] 1 2 #>  #>  #> ---------------WEIGHTING INFORMATION-------------------- #>  #> This hypergraph is weighted #>  #> The hyperedges have weights: #> h1 h2  #>  1  2  #>  #> The vertices have weights: #> v1 v2 v3 v4  #>  1  2  3  4  #>  #> --------------------Orientation Information-------------------- #>  #> This hypergraph is oriented #>  #> This hypergraph is directed #>  #> --------------------REAL COEFFICIENTS INFORMATION-------------------- #>  #> This hypergraph has real coefficients associating vertices to hyperedges #>  #> The incidence matrix associating vertices to hyperedges is given by: #> $from #>    h1 h2 #> v1  1  0 #> v2  2  2 #> v3  0  3 #> v4  0  4 #>  #> $to #>    h1 h2 #> v1  0  1 #> v2  0  2 #> v3  3  0 #> v4  4  0"},{"path":"/index.html","id":"creating-hypergraphs","dir":"","previous_headings":"","what":"Creating hypergraphs","title":"Work with Hypergraphs in R","text":"currently two methods creating hypergraphs rhype, using hyperedge list using incidence matrix.","code":""},{"path":"/index.html","id":"hypergraphs-from-hyperedge-lists","dir":"","previous_headings":"","what":"hypergraphs From hyperedge Lists","title":"Work with Hypergraphs in R","text":"hyperedge list list entry represents hyperedge. unoriented hyperedge, can just represented vector vertices hyperedge. oriented hyperedge, can represented list two vectors, vector containing vertices one end hyperedge. oriented hyperedge, first vector represents vertices tail hyperedge second vertices head. vertex can variable can coerced string factored. recommended vertices represented string first place integer. example hyperedge list can used create hypergraph three hyperedges (named element names list). example oriented list can used create oriented hypergraph can also used create directed hypergraph, first element hyperedge representing tail (information can travel ) second representing head (information can travel )","code":"l1 <- list(   h1 = c(\"a\",\"b\",\"c\"),   h2 = c(\"c\",\"d\",\"e\"),   h3 = c(\"a\", \"e\") ) hype1 <- hype_from_edge_list(l1) hype_info(hype1, weighted = FALSE, oriented = FALSE, real_coef = FALSE) #> ====================HYPERGRAPH INFORMATION==================== #>  #> --------------------VERTEX INFORMATION-------------------- #>  #> This hypergraph has  5  vertices #>  #> These vertices are called: #>  a, b, c, d, e  #>  #> --------------------HYPEREDGE INFORMATION-------------------- #>  #> The hyperedges are called: #>  h1, h2, h3  #>  #> The hyperedges have the structure: #> $h1 #> [1] \"a\" \"b\" \"c\" #>  #> $h2 #> [1] \"c\" \"d\" \"e\" #>  #> $h3 #> [1] \"a\" \"e\" l2 <- list(   h1 = list(     c(\"a\",\"b\"),     c(\"b\",\"c\")   ),   h2 = list(     c(\"b\",\"c\",\"d\"),     c(\"e\",\"f\")   ),   h3 = list(     \"f\",     \"a\"   ) ) hype2 <- hype_from_edge_list(l2) hype_info(hype2, weighted = FALSE, real_coef = FALSE) #> ====================HYPERGRAPH INFORMATION==================== #>  #> --------------------VERTEX INFORMATION-------------------- #>  #> This hypergraph has  6  vertices #>  #> These vertices are called: #>  a, b, c, d, e, f  #>  #> --------------------HYPEREDGE INFORMATION-------------------- #>  #> The hyperedges are called: #>  h1, h2, h3  #>  #> The hyperedges have the structure: #> $h1 #> $h1[[1]] #> [1] \"a\" \"b\" #>  #> $h1[[2]] #> [1] \"b\" \"c\" #>  #>  #> $h2 #> $h2[[1]] #> [1] \"b\" \"c\" \"d\" #>  #> $h2[[2]] #> [1] \"e\" \"f\" #>  #>  #> $h3 #> $h3[[1]] #> [1] \"f\" #>  #> $h3[[2]] #> [1] \"a\" #>  #>  #> --------------------Orientation Information-------------------- #>  #> This hypergraph is oriented #>  #> This hypergraph is not directed hype3 <- hype_from_edge_list(l2, directed = TRUE) hype_info(hype3, weighted = FALSE, real_coef = FALSE) #> ====================HYPERGRAPH INFORMATION==================== #>  #> --------------------VERTEX INFORMATION-------------------- #>  #> This hypergraph has  6  vertices #>  #> These vertices are called: #>  a, b, c, d, e, f  #>  #> --------------------HYPEREDGE INFORMATION-------------------- #>  #> The hyperedges are called: #>  h1, h2, h3  #>  #> The hyperedges have the structure: #> $h1 #> $h1$from #> [1] \"a\" \"b\" #>  #> $h1$to #> [1] \"b\" \"c\" #>  #>  #> $h2 #> $h2$from #> [1] \"b\" \"c\" \"d\" #>  #> $h2$to #> [1] \"e\" \"f\" #>  #>  #> $h3 #> $h3$from #> [1] \"f\" #>  #> $h3$to #> [1] \"a\" #>  #>  #> --------------------Orientation Information-------------------- #>  #> This hypergraph is oriented #>  #> This hypergraph is directed"},{"path":"/index.html","id":"hypergraphs-from-incidence-matrices","dir":"","previous_headings":"","what":"hypergraphs From Incidence Matrices","title":"Work with Hypergraphs in R","text":"incidence matrix can seen table row represents vertex column represents hyperedge. entry 1 vertex member hyperedge 0 . example incidence matrix given can made hypergraph using hype_from_inc_mat() function rhype represents oriented hypergraphs using list two incidence matrices. first inidence matrix represents incidence one end oriented hyperedge represents incidence end (doesn’t matter way round ). example given can turned oriented hypergraph passing function can also turned directed hypergraph using directing option","code":"i1 <- matrix(   c(1,1,1,0,0,0,0,1,1,1,0,1,0,1,0),   nrow = 5,   ncol = 3,   dimnames = list(     paste0(\"v\", 1:5),     paste0(\"h\", 1:3)   ) ) i1 #>    h1 h2 h3 #> v1  1  0  0 #> v2  1  0  1 #> v3  1  1  0 #> v4  0  1  1 #> v5  0  1  0 hype1 <- hype_from_inc_mat(i1) hype_info(hype1, weighted = FALSE, oriented = FALSE, real_coef = FALSE) #> ====================HYPERGRAPH INFORMATION==================== #>  #> --------------------VERTEX INFORMATION-------------------- #>  #> This hypergraph has  5  vertices #>  #> These vertices are called: #>  v1, v2, v3, v4, v5  #>  #> --------------------HYPEREDGE INFORMATION-------------------- #>  #> The hyperedges are called: #>  h1, h2, h3  #>  #> The hyperedges have the structure: #> $h1 #> v1 v2 v3  #>  1  2  3  #>  #> $h2 #> v3 v4 v5  #>  3  4  5  #>  #> $h3 #> v2 v4  #>  2  4 i2 <- list(   matrix(     c(1,1,0,0,1,0,0,1,0,1,1,0),     nrow = 4,     ncol = 3,     dimnames = list(       paste0(\"v\", 1:4),       paste0(\"h\", 1:3)     )   ),   matrix(     c(0,0,1,1,1,1,0,0,1,0,1,0),     nrow = 4,     ncol = 3,     dimnames = list(       paste0(\"v\", 1:4),       paste0(\"h\", 1:3)     )   ) ) i2 #> [[1]] #>    h1 h2 h3 #> v1  1  1  0 #> v2  1  0  1 #> v3  0  0  1 #> v4  0  1  0 #>  #> [[2]] #>    h1 h2 h3 #> v1  0  1  1 #> v2  0  1  0 #> v3  1  0  1 #> v4  1  0  0 hype2 <- hype_from_inc_mat(i2) hype_info(hype2, weighted = FALSE, real_coef = FALSE) #> ====================HYPERGRAPH INFORMATION==================== #>  #> --------------------VERTEX INFORMATION-------------------- #>  #> This hypergraph has  4  vertices #>  #> These vertices are called: #>  v1, v2, v3, v4  #>  #> --------------------HYPEREDGE INFORMATION-------------------- #>  #> The hyperedges are called: #>  h1, h2, h3  #>  #> The hyperedges have the structure: #> $h1 #> $h1[[1]] #> [1] \"v1\" \"v2\" #>  #> $h1[[2]] #> [1] \"v3\" \"v4\" #>  #>  #> $h2 #> $h2[[1]] #> [1] \"v1\" \"v4\" #>  #> $h2[[2]] #> [1] \"v1\" \"v2\" #>  #>  #> $h3 #> $h3[[1]] #> [1] \"v2\" \"v3\" #>  #> $h3[[2]] #> [1] \"v1\" \"v3\" #>  #>  #> --------------------Orientation Information-------------------- #>  #> This hypergraph is oriented #>  #> This hypergraph is not directed hype3 <- hype_from_inc_mat(i2, directed = TRUE) hype_info(hype3, weighted = FALSE, real_coef = FALSE) #> ====================HYPERGRAPH INFORMATION==================== #>  #> --------------------VERTEX INFORMATION-------------------- #>  #> This hypergraph has  4  vertices #>  #> These vertices are called: #>  v1, v2, v3, v4  #>  #> --------------------HYPEREDGE INFORMATION-------------------- #>  #> The hyperedges are called: #>  h1, h2, h3  #>  #> The hyperedges have the structure: #> $h1 #> $h1$from #> [1] \"v1\" \"v2\" #>  #> $h1$to #> [1] \"v3\" \"v4\" #>  #>  #> $h2 #> $h2$from #> [1] \"v1\" \"v4\" #>  #> $h2$to #> [1] \"v1\" \"v2\" #>  #>  #> $h3 #> $h3$from #> [1] \"v2\" \"v3\" #>  #> $h3$to #> [1] \"v1\" \"v3\" #>  #>  #> --------------------Orientation Information-------------------- #>  #> This hypergraph is oriented #>  #> This hypergraph is directed"},{"path":"/index.html","id":"hypergraph-objects","dir":"","previous_headings":"","what":"hypergraph Objects","title":"Work with Hypergraphs in R","text":"hypergraph object essentially collection eleven properties. Together, properties fully describe many different forms hypergraphs. properties listed explained depth :","code":""},{"path":"/index.html","id":"number-of-vertices---numv","dir":"","previous_headings":"","what":"Number of Vertices - numv","title":"Work with Hypergraphs in R","text":"simply postive integer value representing number vertices hypergraph .","code":""},{"path":"/index.html","id":"hyperedge-list---elist","dir":"","previous_headings":"","what":"hyperedge List - elist","title":"Work with Hypergraphs in R","text":"property list every entry represents hyperedge. unoriented hypergraph, hyperedge just vector vertices contained within hyperedge. vertex represented string. oriented hypergraph, hyperedge list two vectors. vectors contains strings representing vertices contained one end hyperedge. directed hypergraph, hyperedge also list two vectors. directed case, first vector represents vertices contained tail hyperedge second vertices contained head. two entries also named .","code":""},{"path":"/index.html","id":"vertex-names---vnames","dir":"","previous_headings":"","what":"Vertex Names - vnames","title":"Work with Hypergraphs in R","text":"vector strings representing name vertex. technical point, used reference levels factoring multiple groups vertices.","code":""},{"path":"/index.html","id":"vertex-weights---vweights","dir":"","previous_headings":"","what":"Vertex Weights - vweights","title":"Work with Hypergraphs in R","text":"vector weights associated vertex. little practical use rhype implementation except keep track hyperedge weights transforming hypergraph dual.","code":""},{"path":"/index.html","id":"hyperedge-names---enames","dir":"","previous_headings":"","what":"hyperedge Names - enames","title":"Work with Hypergraphs in R","text":"vector strings representing name hyperedge technical point, used reference levels factoring multiple groups hyperedges.","code":""},{"path":"/index.html","id":"hyperedge-weights---eweights","dir":"","previous_headings":"","what":"hyperedge Weights - eweights","title":"Work with Hypergraphs in R","text":"vector weights associated hyperedge.","code":""},{"path":"/index.html","id":"weighted---weighted","dir":"","previous_headings":"","what":"Weighted - weighted","title":"Work with Hypergraphs in R","text":"logical value indicating whether weights associated vertices hyperedges.","code":""},{"path":"/index.html","id":"oriented---oriented","dir":"","previous_headings":"","what":"Oriented - oriented","title":"Work with Hypergraphs in R","text":"logical value indicating whether hyperedges oriented.","code":""},{"path":"/index.html","id":"directed---directed","dir":"","previous_headings":"","what":"Directed - directed","title":"Work with Hypergraphs in R","text":"logical value indicating whether hyperedges directed.","code":""},{"path":"/index.html","id":"real-coefficients---real_coef","dir":"","previous_headings":"","what":"Real Coefficients - real_coef","title":"Work with Hypergraphs in R","text":"logical vector indicating whether real coefficients associating vertices hyperedges.","code":""},{"path":"/index.html","id":"incidence-matrix---inc_mat","dir":"","previous_headings":"","what":"Incidence Matrix - inc_mat","title":"Work with Hypergraphs in R","text":"used hypergraphs real coefficients. unoriented hypergraphs matrix row every vertex column every hyperedge, entry represents value vertex hyperedge associated. oriented hypergraphs, inc_mat list two incidence matrices, one representing incidence one side hyepredge representing incidence . directed hypergraphs, inc_mat list two incidence matrices, first representing incidence tail hyperedge second representing incidence head hyperedge.","code":""},{"path":"/reference/adjacency_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the Adjacency Matrix of a Hypergraph — adjacency_matrix","title":"Find the Adjacency Matrix of a Hypergraph — adjacency_matrix","text":"adjacency matrix square matrix rows columns indexed vertices. entry, number proportional strength connection going vertex represented row vertex represented column. undirected hypergraphs, matrix symmetric usually case directed.","code":""},{"path":"/reference/adjacency_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the Adjacency Matrix of a Hypergraph — adjacency_matrix","text":"","code":"adjacency_matrix(hype, normalise = FALSE, self_adj = FALSE, as_matrix = TRUE)"},{"path":"/reference/adjacency_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the Adjacency Matrix of a Hypergraph — adjacency_matrix","text":"hype hypergraph object normalise Whether matrix normalised either 1 0 self_adj Whether self adjacency represented as_matrix Whether output coerced simple matrix","code":""},{"path":"/reference/adjacency_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the Adjacency Matrix of a Hypergraph — adjacency_matrix","text":"matrix adjacencies vertices hypergraph.","code":""},{"path":"/reference/adjacency_matrix.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find the Adjacency Matrix of a Hypergraph — adjacency_matrix","text":"Great care taken using hypergraph mixed positive negative real coefficients chance adjacency registered two adjacenct vertices. rhype check cases must checked user.","code":""},{"path":"/reference/adjacency_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find the Adjacency Matrix of a Hypergraph — adjacency_matrix","text":"","code":"h1 <- example_hype() adjacency_matrix(h1) #>    v1 v2 v3 v4 #> v1  0  1  1  0 #> v2  1  0  2  1 #> v3  1  2  0  1 #> v4  0  1  1  0  h2 <- example_hype(oriented = TRUE, directed = TRUE) adjacency_matrix(h2) #>    v1 v2 v3 v4 #> v1  0  0  1  1 #> v2  1  0  1  1 #> v3  1  1  0  0 #> v4  1  1  0  0"},{"path":"/reference/cardinality.html","id":null,"dir":"Reference","previous_headings":"","what":"Find The Cardinality Of Hyperedges In A Hypergraph — cardinality","title":"Find The Cardinality Of Hyperedges In A Hypergraph — cardinality","text":"cardinality hyperedge number vertices contains.","code":""},{"path":"/reference/cardinality.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find The Cardinality Of Hyperedges In A Hypergraph — cardinality","text":"","code":"cardinality(hype)"},{"path":"/reference/cardinality.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find The Cardinality Of Hyperedges In A Hypergraph — cardinality","text":"hype hypergraph object.","code":""},{"path":"/reference/cardinality.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find The Cardinality Of Hyperedges In A Hypergraph — cardinality","text":"vector cardinality hyperedges.","code":""},{"path":"/reference/cardinality.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find The Cardinality Of Hyperedges In A Hypergraph — cardinality","text":"","code":"hype <- example_hype() cardinality(hype) #> h1 h2  #>  3  3"},{"path":"/reference/degree.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the Degree of Vertices in a Hypergraph — degree","title":"Find the Degree of Vertices in a Hypergraph — degree","text":"degree vertex way expressing many connections vertex rest hypergraph. current version rhype three methods computing degree.","code":""},{"path":"/reference/degree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the Degree of Vertices in a Hypergraph — degree","text":"","code":"degree(hype, method = NA)"},{"path":"/reference/degree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the Degree of Vertices in a Hypergraph — degree","text":"hype hypergraph object method method calculating degree. \"vertex\", \"vertex_simple\", \"hyperedge\" \"hyperedge_simple\"","code":""},{"path":"/reference/degree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the Degree of Vertices in a Hypergraph — degree","text":"vector representing degree vertex respect given method.","code":""},{"path":"/reference/degree.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find the Degree of Vertices in a Hypergraph — degree","text":"\"vertex\" counts number ways possible move another vertex. multiple hyperedges connecting two vertices, hyperedges counted new way move two vertices. weighted hypergraphs hypergraphs real coefficients, strength connection two vertices functions weights real coefficients. \"vertex_simple\" just counts number vertices possible reach one step given vertex, matter many hyperedges connect . \"hyperedge\" represents strength vertex connects hyperedges member . taken work Jurgen Jost Raffaella Mulas doi: 10.1016/j.aim.2019.05.025 . unweighted hypergraphs without real coefficients equivalent \"hyperedge_simple\". \"hyperedge_simple\" just counts number hyperedges vertex member .","code":""},{"path":"/reference/degree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find the Degree of Vertices in a Hypergraph — degree","text":"","code":"h1 <- example_hype() degree(h1) #> Warning: Degree method not chosen, using 'hyperedge' by default #> v1 v2 v3 v4  #>  1  2  2  1"},{"path":"/reference/eigenvector_centrality.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate The Eigenvector Centrality Of A Hypergraph — eigenvector_centrality","title":"Calculate The Eigenvector Centrality Of A Hypergraph — eigenvector_centrality","text":"calculate eigenvector centrality hypergraph, vertex assigned value proportional sum value neighbours.","code":""},{"path":"/reference/eigenvector_centrality.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate The Eigenvector Centrality Of A Hypergraph — eigenvector_centrality","text":"","code":"eigenvector_centrality(hype)"},{"path":"/reference/eigenvector_centrality.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate The Eigenvector Centrality Of A Hypergraph — eigenvector_centrality","text":"hype hypergraph object","code":""},{"path":"/reference/eigenvector_centrality.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate The Eigenvector Centrality Of A Hypergraph — eigenvector_centrality","text":"vector values representing eigenvector centrality node","code":""},{"path":"/reference/eigenvector_centrality.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate The Eigenvector Centrality Of A Hypergraph — eigenvector_centrality","text":"","code":"h1 <- example_hype() eigenvector_centrality(h1) #>       v1       v2       v3       v4  #> 0.371748 0.601501 0.601501 0.371748"},{"path":"/reference/eigenvector_centrality_factor.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate The Eigenvector Centrality Scaling Factor Of A Hypergraph — eigenvector_centrality_factor","title":"Calculate The Eigenvector Centrality Scaling Factor Of A Hypergraph — eigenvector_centrality_factor","text":"calculate eigenvector centrality hypergraph, vertex assigned value proportional sum value neighbours. function gives scaling factor relating value node sum value neighbours.","code":""},{"path":"/reference/eigenvector_centrality_factor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate The Eigenvector Centrality Scaling Factor Of A Hypergraph — eigenvector_centrality_factor","text":"","code":"eigenvector_centrality_factor(hype)"},{"path":"/reference/eigenvector_centrality_factor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate The Eigenvector Centrality Scaling Factor Of A Hypergraph — eigenvector_centrality_factor","text":"hype hypergraph object","code":""},{"path":"/reference/eigenvector_centrality_factor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate The Eigenvector Centrality Scaling Factor Of A Hypergraph — eigenvector_centrality_factor","text":"number representing scaling factor relating value node sum value neighbours","code":""},{"path":"/reference/eigenvector_centrality_factor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate The Eigenvector Centrality Scaling Factor Of A Hypergraph — eigenvector_centrality_factor","text":"","code":"h1 <- example_hype() eigenvector_centrality_factor(h1) #> [1] 3.236068"},{"path":"/reference/example_hype.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate an Example Hypergraph — example_hype","title":"Generate an Example Hypergraph — example_hype","text":"Quickly generate example hypergraph. Can used quickly testing trialing examples.","code":""},{"path":"/reference/example_hype.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate an Example Hypergraph — example_hype","text":"","code":"example_hype(   oriented = FALSE,   directed = FALSE,   vertex_weighted = FALSE,   edge_weighted = FALSE,   real_coef = FALSE )"},{"path":"/reference/example_hype.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate an Example Hypergraph — example_hype","text":"oriented Logical value representing whether example hypergraph oriented directed Logical value representing whether example hypergraph directed vertex_weighted Logical value representing whether example hypergraph vertex weights edge_weighted Logical value representing whether example hypergraph hyperedge weights real_coef Logical value representing whether example hypergraph real coefficients relating vertices hyperedges","code":""},{"path":"/reference/example_hype.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate an Example Hypergraph — example_hype","text":"example hypergraph given properties","code":""},{"path":"/reference/example_hype.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate an Example Hypergraph — example_hype","text":"","code":"h1 <- example_hype() h2 <- example_hype(oriented = TRUE) h3 <- example_hype(oriented = TRUE, directed = TRUE) h4 <- example_hype(oriented = TRUE, directed = TRUE, real_coef = TRUE)"},{"path":"/reference/has_real_coef.html","id":null,"dir":"Reference","previous_headings":"","what":"Does a Hypergraph Have Real Coefficients — has_real_coef","title":"Does a Hypergraph Have Real Coefficients — has_real_coef","text":"Takes hypergraph object returns whether real coefficients associating vertices hyperedges.","code":""},{"path":"/reference/has_real_coef.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Does a Hypergraph Have Real Coefficients — has_real_coef","text":"","code":"has_real_coef(hype)"},{"path":"/reference/has_real_coef.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Does a Hypergraph Have Real Coefficients — has_real_coef","text":"hype hypergraph object.","code":""},{"path":"/reference/has_real_coef.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Does a Hypergraph Have Real Coefficients — has_real_coef","text":"logical value indicating whether real cofficients associating vertices hyperedges.","code":""},{"path":"/reference/has_real_coef.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Does a Hypergraph Have Real Coefficients — has_real_coef","text":"","code":"h <- example_hype() has_real_coef(h) #> [1] FALSE"},{"path":"/reference/hype_from_edge_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Hypergraph From a Hyperedge List — hype_from_edge_list","title":"Create a Hypergraph From a Hyperedge List — hype_from_edge_list","text":"Create Hypergraph Hyperedge List","code":""},{"path":"/reference/hype_from_edge_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Hypergraph From a Hyperedge List — hype_from_edge_list","text":"","code":"hype_from_edge_list(elist, directed = FALSE)"},{"path":"/reference/hype_from_edge_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Hypergraph From a Hyperedge List — hype_from_edge_list","text":"elist hyperedge list. unoriented hypergraph, hyperedge just vector vertices contained within hyperedge. vertex represented string. oriented hypergraph, hyperedge list two vectors. vectors contains strings representing vertices contained one end hyperedge. directed hypergraph, hyperedge also list two vectors. directed case, first vector represents vertices contained tail hyperedge second vertices contained head. two entries also named . directed logical value representing whether hypergraph directed.","code":""},{"path":"/reference/hype_from_edge_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Hypergraph From a Hyperedge List — hype_from_edge_list","text":"hypergraph object given hyperedge structure.","code":""},{"path":"/reference/hype_from_edge_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Hypergraph From a Hyperedge List — hype_from_edge_list","text":"","code":"l1 <- list(   h1 = c(\"a\", \"b\", \"c\"),   h2 = c(\"c\", \"d\", \"e\"),   h3 = c(\"a\", \"e\") ) hype1 <- hype_from_edge_list(l1)  l2 <- list(   h1 = list(     c(\"a\", \"b\"),     c(\"b\", \"c\")   ),   h2 = list(     c(\"b\", \"c\", \"d\"),     c(\"e\", \"f\")   ),   h3 = list(     \"f\",     \"a\"   ) ) hype2 <- hype_from_edge_list(l2) hype3 <- hype_from_edge_list(l2, directed = TRUE)"},{"path":"/reference/hype_from_inc_mat.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Hypergraph From an Incidence Matrix — hype_from_inc_mat","title":"Create a Hypergraph From an Incidence Matrix — hype_from_inc_mat","text":"Create Hypergraph Incidence Matrix","code":""},{"path":"/reference/hype_from_inc_mat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Hypergraph From an Incidence Matrix — hype_from_inc_mat","text":"","code":"hype_from_inc_mat(inc_mat, directed = FALSE, real_coef = FALSE)"},{"path":"/reference/hype_from_inc_mat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Hypergraph From an Incidence Matrix — hype_from_inc_mat","text":"inc_mat incidence matrix , oriented hypergraph, list two incidence matrices. directed logical value representing whether hypergraph directed. real_coef logical value representing whether hypergraph real coefficients associating vertices hyperedges.","code":""},{"path":"/reference/hype_from_inc_mat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Hypergraph From an Incidence Matrix — hype_from_inc_mat","text":"hypergraph object given incidence structure.","code":""},{"path":"/reference/hype_from_inc_mat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Hypergraph From an Incidence Matrix — hype_from_inc_mat","text":"","code":"i1 <- matrix(   c(1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0),   nrow = 5,   ncol = 3,   dimnames = list(     paste0(\"v\", 1:5),     paste0(\"h\", 1:3)   ) ) hype1 <- hype_from_inc_mat(i1)  i2 <- list(   matrix(     c(1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0),     nrow = 4,     ncol = 3,     dimnames = list(       paste0(\"v\", 1:4),       paste0(\"h\", 1:3)     )   ),   matrix(     c(0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0),     nrow = 4,     ncol = 3,     dimnames = list(       paste0(\"v\", 1:4),       paste0(\"h\", 1:3)     )   ) ) hype2 <- hype_from_inc_mat(i2) hype3 <- hype_from_inc_mat(i2, directed = TRUE)"},{"path":"/reference/hype_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Print More Detail About a Hypergraph — hype_info","title":"Print More Detail About a Hypergraph — hype_info","text":"Get detailed printout contained within hypergraph object understand structure whole without repeatedly call functions.","code":""},{"path":"/reference/hype_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print More Detail About a Hypergraph — hype_info","text":"","code":"hype_info(   hype,   numv = TRUE,   elist = TRUE,   vnames = TRUE,   vweights = TRUE,   enames = TRUE,   eweights = TRUE,   weighted = TRUE,   oriented = TRUE,   directed = TRUE,   real_coef = TRUE,   inc_mat = TRUE )"},{"path":"/reference/hype_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print More Detail About a Hypergraph — hype_info","text":"hype hypergraph object numv logical variable indicating whether information number vertices printed elist logical variable indicating whether information hyperedge list printed vnames logical variable indicating whether information vertex names printed vweights logical variable indicating whether information vertex weights printed enames logical variable indicating whether information hyperedge names printed eweights logical variable indicating whether information hyperedge weights printed weighted logical variable indicating whether information hypergraph weighting printed oriented logical variable indicating whether information hypergraph orientation printed directed logical variable indicating whether information hypergraph direction printed real_coef logical variable indicating whether information hypergraph real coefficients printed inc_mat logical variable indicating whether information hypergraph incidence matrix printed","code":""},{"path":"/reference/hype_info.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Print More Detail About a Hypergraph — hype_info","text":"gives detailed look whole hypegraph object. intended solely  aid user using rhype generally included final scripts. user wants include final script instead heavily encouraged use rhype functions generate bespoke messages.","code":""},{"path":"/reference/hype_info.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print More Detail About a Hypergraph — hype_info","text":"","code":"hype1 <- example_hype() hype_info(hype1) #> ====================HYPERGRAPH INFORMATION==================== #>  #> --------------------VERTEX INFORMATION-------------------- #>  #> This hypergraph has  4  vertices #>  #> These vertices are called: #>  v1, v2, v3, v4  #>  #> --------------------HYPEREDGE INFORMATION-------------------- #>  #> The hyperedges are called: #>  h1, h2  #>  #> The hyperedges have the structure: #> $h1 #> [1] 1 2 3 #>  #> $h2 #> [1] 2 3 4 #>  #> ---------------WEIGHTING INFORMATION-------------------- #>  #> This hypergraph is not weighted #>  #> --------------------Orientation Information-------------------- #>  #> This hypergraph is not oriented #>  #> This hypergraph is not directed #>  #> --------------------REAL COEFFICIENTS INFORMATION-------------------- #>  #> This hypergraph does not have real coefficients associating vertices to hyperedges #>  #> There is no incidence matrix associating vertices to hyperedges with non-binary coefficients #>   hype2 <- example_hype(vertex_weighted = TRUE, edge_weighted = TRUE) hype_info(hype2) #> ====================HYPERGRAPH INFORMATION==================== #>  #> --------------------VERTEX INFORMATION-------------------- #>  #> This hypergraph has  4  vertices #>  #> These vertices are called: #>  v1, v2, v3, v4  #>  #> --------------------HYPEREDGE INFORMATION-------------------- #>  #> The hyperedges are called: #>  h1, h2  #>  #> The hyperedges have the structure: #> $h1 #> [1] 1 2 3 #>  #> $h2 #> [1] 2 3 4 #>  #> ---------------WEIGHTING INFORMATION-------------------- #>  #> This hypergraph is weighted #>  #> The hyperedges have weights: #> h1 h2  #>  1  2  #>  #> The vertices have weights: #> v1 v2 v3 v4  #>  1  2  3  4  #>  #> --------------------Orientation Information-------------------- #>  #> This hypergraph is not oriented #>  #> This hypergraph is not directed #>  #> --------------------REAL COEFFICIENTS INFORMATION-------------------- #>  #> This hypergraph does not have real coefficients associating vertices to hyperedges #>  #> There is no incidence matrix associating vertices to hyperedges with non-binary coefficients #>   hype3 <- example_hype(oriented = TRUE, directed = TRUE, real_coef = TRUE) hype_info(hype3) #> ====================HYPERGRAPH INFORMATION==================== #>  #> --------------------VERTEX INFORMATION-------------------- #>  #> This hypergraph has  4  vertices #>  #> These vertices are called: #>  v1, v2, v3, v4  #>  #> --------------------HYPEREDGE INFORMATION-------------------- #>  #> The hyperedges are called: #>  h1, h2  #>  #> The hyperedges have the structure: #> $h1 #> $h1$from #> [1] 1 2 #>  #> $h1$to #> [1] 3 4 #>  #>  #> $h2 #> $h2$from #> [1] 2 3 4 #>  #> $h2$to #> [1] 1 2 #>  #>  #> ---------------WEIGHTING INFORMATION-------------------- #>  #> This hypergraph is not weighted #>  #> --------------------Orientation Information-------------------- #>  #> This hypergraph is oriented #>  #> This hypergraph is directed #>  #> --------------------REAL COEFFICIENTS INFORMATION-------------------- #>  #> This hypergraph has real coefficients associating vertices to hyperedges #>  #> The incidence matrix associating vertices to hyperedges is given by: #> $from #>    h1 h2 #> v1  1  0 #> v2  2  2 #> v3  0  3 #> v4  0  4 #>  #> $to #>    h1 h2 #> v1  0  1 #> v2  0  2 #> v3  3  0 #> v4  4  0 #>"},{"path":"/reference/hype_norm_lap_mat.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the Hyperedge Normalised Laplacian Matrix of a Hypergraph — hype_norm_lap_mat","title":"Find the Hyperedge Normalised Laplacian Matrix of a Hypergraph — hype_norm_lap_mat","text":"defined Jurgen Jost Raffaella Mulas doi: 10.1016/j.aim.2019.05.025","code":""},{"path":"/reference/hype_norm_lap_mat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the Hyperedge Normalised Laplacian Matrix of a Hypergraph — hype_norm_lap_mat","text":"","code":"hype_norm_lap_mat(hype, as_matrix = TRUE)"},{"path":"/reference/hype_norm_lap_mat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the Hyperedge Normalised Laplacian Matrix of a Hypergraph — hype_norm_lap_mat","text":"hype hypergraph object as_matrix Whether coerce result simple matrix","code":""},{"path":"/reference/hype_norm_lap_mat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the Hyperedge Normalised Laplacian Matrix of a Hypergraph — hype_norm_lap_mat","text":"hyperedge normalised laplacian matrix hypergraph","code":""},{"path":"/reference/hype_norm_lap_mat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find the Hyperedge Normalised Laplacian Matrix of a Hypergraph — hype_norm_lap_mat","text":"","code":"h1 <- example_hype() hype_norm_lap_mat(h1) #>    h1 h2 #> h1  2  1 #> h2  1  2"},{"path":"/reference/hype_order.html","id":null,"dir":"Reference","previous_headings":"","what":"Get The Order Of A Hypergraph — hype_order","title":"Get The Order Of A Hypergraph — hype_order","text":"order hypergraph number vertices ","code":""},{"path":"/reference/hype_order.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get The Order Of A Hypergraph — hype_order","text":"","code":"hype_order(hype)"},{"path":"/reference/hype_order.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get The Order Of A Hypergraph — hype_order","text":"hype hypergraph object","code":""},{"path":"/reference/hype_order.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get The Order Of A Hypergraph — hype_order","text":"number representing number vertices hypergraph","code":""},{"path":"/reference/hype_order.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get The Order Of A Hypergraph — hype_order","text":"","code":"hype <- example_hype() hype_order(hype) #> [1] 4"},{"path":"/reference/hype_size.html","id":null,"dir":"Reference","previous_headings":"","what":"Get The Size Of A Hypergraph — hype_size","title":"Get The Size Of A Hypergraph — hype_size","text":"size hypergraph number hyperedges contains","code":""},{"path":"/reference/hype_size.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get The Size Of A Hypergraph — hype_size","text":"","code":"hype_size(hype)"},{"path":"/reference/hype_size.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get The Size Of A Hypergraph — hype_size","text":"hype hypergraph object","code":""},{"path":"/reference/hype_size.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get The Size Of A Hypergraph — hype_size","text":"number representing number hyperedges hypergraph","code":""},{"path":"/reference/hype_size.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get The Size Of A Hypergraph — hype_size","text":"","code":"h1 <- example_hype() hype_size(h1) #> [1] 2"},{"path":"/reference/hyperedge_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Hyperedge List — hyperedge_list","title":"Get Hyperedge List — hyperedge_list","text":"Take hypergraph object return hyperedge list.","code":""},{"path":"/reference/hyperedge_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Hyperedge List — hyperedge_list","text":"","code":"hyperedge_list(hype)"},{"path":"/reference/hyperedge_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Hyperedge List — hyperedge_list","text":"hype hypergraph object","code":""},{"path":"/reference/hyperedge_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Hyperedge List — hyperedge_list","text":"hyperedge list. See main documentation details structure","code":""},{"path":"/reference/hyperedge_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Hyperedge List — hyperedge_list","text":"","code":"h <- example_hype() hyperedge_list(h) #> $h1 #> [1] 1 2 3 #>  #> $h2 #> [1] 2 3 4 #>"},{"path":"/reference/hyperedge_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Hyperedge Names — hyperedge_names","title":"Get Hyperedge Names — hyperedge_names","text":"Takes hypergraph object returns names hyperedges.","code":""},{"path":"/reference/hyperedge_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Hyperedge Names — hyperedge_names","text":"","code":"hyperedge_names(hype)"},{"path":"/reference/hyperedge_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Hyperedge Names — hyperedge_names","text":"hype hypergraph object.","code":""},{"path":"/reference/hyperedge_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Hyperedge Names — hyperedge_names","text":"vector strings representing names hyperedges. hyperedges names assocaited return NULL instead.","code":""},{"path":"/reference/hyperedge_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Hyperedge Names — hyperedge_names","text":"","code":"h <- example_hype() hyperedge_names(h) #> [1] \"h1\" \"h2\""},{"path":"/reference/hyperedge_weights.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Hyperedge Weights — hyperedge_weights","title":"Get Hyperedge Weights — hyperedge_weights","text":"Takes hypergraph object returns weights associated hyperedge","code":""},{"path":"/reference/hyperedge_weights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Hyperedge Weights — hyperedge_weights","text":"","code":"hyperedge_weights(hype)"},{"path":"/reference/hyperedge_weights.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Hyperedge Weights — hyperedge_weights","text":"hype hypergraph object.","code":""},{"path":"/reference/hyperedge_weights.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Hyperedge Weights — hyperedge_weights","text":"vector weights asssociated hyperedges. weights assicated hyperedges NULL returned instead.","code":""},{"path":"/reference/hyperedge_weights.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Hyperedge Weights — hyperedge_weights","text":"","code":"h <- example_hype() hyperedge_weights(h) #> NULL"},{"path":"/reference/incidence_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the Incidence Matrix of a Hypergraph — incidence_matrix","title":"Find the Incidence Matrix of a Hypergraph — incidence_matrix","text":"incidence matrix rows indexed vertices columns indexed hyperedges. entry non-zero associated vertex member associated hyperedge. oriented hypergraph, returns list two matrices first representing incidence one end hyperedges second representing incidence end. directed hypergraph first represents incidence tail hyperedge second represents incidence head.","code":""},{"path":"/reference/incidence_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the Incidence Matrix of a Hypergraph — incidence_matrix","text":"","code":"incidence_matrix(hype, augment_oriented = TRUE, as_matrix = TRUE)"},{"path":"/reference/incidence_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the Incidence Matrix of a Hypergraph — incidence_matrix","text":"hype hypergraph object augment_oriented Whether augment oriented hypergraph as_matrix Whether coerce result simple matrix","code":""},{"path":"/reference/incidence_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the Incidence Matrix of a Hypergraph — incidence_matrix","text":"incidence matrix list two incidence matrices.","code":""},{"path":"/reference/incidence_matrix.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find the Incidence Matrix of a Hypergraph — incidence_matrix","text":"hard use incidence matrices oriented undirected hypergraphs calculations. augment_oriented option turns hypergraph directed hypergraph, hyperedge represented twice, pointing direction. much easier use calculations.","code":""},{"path":"/reference/incidence_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find the Incidence Matrix of a Hypergraph — incidence_matrix","text":"","code":"h1 <- example_hype() incidence_matrix(h1) #>    h1 h2 #> v1  1  0 #> v2  1  1 #> v3  1  1 #> v4  0  1  h2 <- example_hype(oriented = TRUE, directed = TRUE) incidence_matrix(h2) #> $from #>    h1 h2 #> v1  1  0 #> v2  1  1 #> v3  0  1 #> v4  0  1 #>  #> $to #>    h1 h2 #> v1  0  1 #> v2  0  1 #> v3  1  0 #> v4  1  0 #>"},{"path":"/reference/is_directed.html","id":null,"dir":"Reference","previous_headings":"","what":"Is a Hypergraph Directed — is_directed","title":"Is a Hypergraph Directed — is_directed","text":"Takes hypergraph object returns whether hyperedges directed.","code":""},{"path":"/reference/is_directed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is a Hypergraph Directed — is_directed","text":"","code":"is_directed(hype)"},{"path":"/reference/is_directed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is a Hypergraph Directed — is_directed","text":"hype hyeprgraph object.","code":""},{"path":"/reference/is_directed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is a Hypergraph Directed — is_directed","text":"logical value indicating whether hyperedges directed.","code":""},{"path":"/reference/is_directed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is a Hypergraph Directed — is_directed","text":"","code":"h <- example_hype() is_directed(h) #> [1] FALSE"},{"path":"/reference/is_oriented.html","id":null,"dir":"Reference","previous_headings":"","what":"Is a Hypergraph Oriented — is_oriented","title":"Is a Hypergraph Oriented — is_oriented","text":"Takes hypergraph object returns whether hyperedges oriented.","code":""},{"path":"/reference/is_oriented.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is a Hypergraph Oriented — is_oriented","text":"","code":"is_oriented(hype)"},{"path":"/reference/is_oriented.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is a Hypergraph Oriented — is_oriented","text":"hype hypergraph object.","code":""},{"path":"/reference/is_oriented.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is a Hypergraph Oriented — is_oriented","text":"logical value indicating whether hyperedges oriented.","code":""},{"path":"/reference/is_oriented.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is a Hypergraph Oriented — is_oriented","text":"","code":"h <- example_hype() is_oriented(h) #> [1] FALSE"},{"path":"/reference/is_weighted.html","id":null,"dir":"Reference","previous_headings":"","what":"Is a Hypergraph Weighted — is_weighted","title":"Is a Hypergraph Weighted — is_weighted","text":"Takes hypergraph object returns whether hypergraph weights associated vertices hyperedges.","code":""},{"path":"/reference/is_weighted.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is a Hypergraph Weighted — is_weighted","text":"","code":"is_weighted(hype)"},{"path":"/reference/is_weighted.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is a Hypergraph Weighted — is_weighted","text":"hype hypergraph object.","code":""},{"path":"/reference/is_weighted.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is a Hypergraph Weighted — is_weighted","text":"logical value indicating whether hypergraph weights associated vertices hyperedges.","code":""},{"path":"/reference/is_weighted.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is a Hypergraph Weighted — is_weighted","text":"","code":"h <- example_hype() is_weighted(h) #> [1] FALSE"},{"path":"/reference/laplacian_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the Laplacian Matrix of a Hypergraph — laplacian_matrix","title":"Find the Laplacian Matrix of a Hypergraph — laplacian_matrix","text":"Find Laplacian Matrix Hypergraph","code":""},{"path":"/reference/laplacian_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the Laplacian Matrix of a Hypergraph — laplacian_matrix","text":"","code":"laplacian_matrix(hype, as_matrix = TRUE)"},{"path":"/reference/laplacian_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the Laplacian Matrix of a Hypergraph — laplacian_matrix","text":"hype hypergraph object as_matrix Whether coerce result simple matrix","code":""},{"path":"/reference/laplacian_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the Laplacian Matrix of a Hypergraph — laplacian_matrix","text":"laplacian matrix hypergraph","code":""},{"path":"/reference/laplacian_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find the Laplacian Matrix of a Hypergraph — laplacian_matrix","text":"","code":"h1 <- example_hype() laplacian_matrix(h1) #> Warning: laplacian_matrix finds the simplified support graph laplacian #>    v1 v2 v3 v4 #> v1  2 -1 -1  0 #> v2 -1  3 -1 -1 #> v3 -1 -1  3 -1 #> v4  0 -1 -1  2"},{"path":"/reference/max_cardinality.html","id":null,"dir":"Reference","previous_headings":"","what":"Find The Maximum Cardinality Of A Hyperedge In A Hypergraph — max_cardinality","title":"Find The Maximum Cardinality Of A Hyperedge In A Hypergraph — max_cardinality","text":"cardinality hyperedge number vertices contains.","code":""},{"path":"/reference/max_cardinality.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find The Maximum Cardinality Of A Hyperedge In A Hypergraph — max_cardinality","text":"","code":"max_cardinality(hype)"},{"path":"/reference/max_cardinality.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find The Maximum Cardinality Of A Hyperedge In A Hypergraph — max_cardinality","text":"hype hypergraph object.","code":""},{"path":"/reference/max_cardinality.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find The Maximum Cardinality Of A Hyperedge In A Hypergraph — max_cardinality","text":"value maximum cardinality hyperedge hypergraph.","code":""},{"path":"/reference/max_cardinality.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find The Maximum Cardinality Of A Hyperedge In A Hypergraph — max_cardinality","text":"","code":"hype <- example_hype() max_cardinality(hype) #> [1] 3"},{"path":"/reference/max_degree.html","id":null,"dir":"Reference","previous_headings":"","what":"Find The Maximum Degree Of A Hypergraph — max_degree","title":"Find The Maximum Degree Of A Hypergraph — max_degree","text":"degree vertex way expressing many connections vertex rest hypergraph. See degree help documentation details.","code":""},{"path":"/reference/max_degree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find The Maximum Degree Of A Hypergraph — max_degree","text":"","code":"max_degree(hype, method = NA)"},{"path":"/reference/max_degree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find The Maximum Degree Of A Hypergraph — max_degree","text":"hype hypergraph object. method method calculate degree, see degree help documentation information.","code":""},{"path":"/reference/max_degree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find The Maximum Degree Of A Hypergraph — max_degree","text":"maximum value chosen degree among vertices hypergraph.","code":""},{"path":"/reference/max_degree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find The Maximum Degree Of A Hypergraph — max_degree","text":"","code":"h <- example_hype() max_degree(h) #> Warning: Degree method not chosen, using 'hyperedge' by default #> [1] 2"},{"path":"/reference/min_cardinality.html","id":null,"dir":"Reference","previous_headings":"","what":"Find The Minimum Cardinality Of A Hyperedge In A Hypergraph — min_cardinality","title":"Find The Minimum Cardinality Of A Hyperedge In A Hypergraph — min_cardinality","text":"cardinality hyperedge number vertices contains.","code":""},{"path":"/reference/min_cardinality.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find The Minimum Cardinality Of A Hyperedge In A Hypergraph — min_cardinality","text":"","code":"min_cardinality(hype)"},{"path":"/reference/min_cardinality.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find The Minimum Cardinality Of A Hyperedge In A Hypergraph — min_cardinality","text":"hype hypergraph object.","code":""},{"path":"/reference/min_cardinality.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find The Minimum Cardinality Of A Hyperedge In A Hypergraph — min_cardinality","text":"value minimum cardinality hyperedge hypergraph.","code":""},{"path":"/reference/min_cardinality.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find The Minimum Cardinality Of A Hyperedge In A Hypergraph — min_cardinality","text":"","code":"hype <- example_hype() min_cardinality(hype) #> [1] 3"},{"path":"/reference/min_degree.html","id":null,"dir":"Reference","previous_headings":"","what":"Find The Minimum Degree Of A Hypergraph — min_degree","title":"Find The Minimum Degree Of A Hypergraph — min_degree","text":"degree vertex way expressing many connections vertex rest hypergraph. See degree help documentation details.","code":""},{"path":"/reference/min_degree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find The Minimum Degree Of A Hypergraph — min_degree","text":"","code":"min_degree(hype, method = NA)"},{"path":"/reference/min_degree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find The Minimum Degree Of A Hypergraph — min_degree","text":"hype hypergraph object. method method calculate degree, see degree help documentation information.","code":""},{"path":"/reference/min_degree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find The Minimum Degree Of A Hypergraph — min_degree","text":"maximum value chosen degree among vertices hypergraph.","code":""},{"path":"/reference/min_degree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find The Minimum Degree Of A Hypergraph — min_degree","text":"","code":"h <- example_hype() min_degree(h) #> Warning: Degree method not chosen, using 'hyperedge' by default #> [1] 1"},{"path":"/reference/pseudo_invert.html","id":null,"dir":"Reference","previous_headings":"","what":"Pseudo-Invert a Vector — pseudo_invert","title":"Pseudo-Invert a Vector — pseudo_invert","text":"Pseudoinversion vector non-zero element inverted zero element remains untouched. useful pseudoinverting matrices non-zero entries leading diagonal.","code":""},{"path":"/reference/pseudo_invert.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pseudo-Invert a Vector — pseudo_invert","text":"","code":"pseudo_invert(vec)"},{"path":"/reference/pseudo_invert.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pseudo-Invert a Vector — pseudo_invert","text":"vec vector numbers","code":""},{"path":"/reference/pseudo_invert.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pseudo-Invert a Vector — pseudo_invert","text":"vector pseudo-inverted numbers","code":""},{"path":"/reference/spectra.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the Spectra of a Hypergraph — spectra","title":"Find the Spectra of a Hypergraph — spectra","text":"Find Spectra Hypergraph","code":""},{"path":"/reference/spectra.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the Spectra of a Hypergraph — spectra","text":"","code":"spectra(hype, matrix = \"laplacian\", n = NULL)"},{"path":"/reference/spectra.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the Spectra of a Hypergraph — spectra","text":"hype hypergraph object matrix matrix calculate spectra respect . \"laplacian\", \"adjacency\", \"vert_norm_lap_mat\" \"hype_norm_lap_mat\" n number eigenvalues eigenvectors calculate. left empty NULL calculated.","code":""},{"path":"/reference/spectra.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the Spectra of a Hypergraph — spectra","text":"eigen decomposition given matrix given hypergraph","code":""},{"path":"/reference/spectra.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find the Spectra of a Hypergraph — spectra","text":"","code":"h <- example_hype() spectra(h) #> Warning: laplacian_matrix finds the simplified support graph laplacian #> eigen() decomposition #> $values #> [1] 4.000000e+00 4.000000e+00 2.000000e+00 2.664535e-15 #>  #> $vectors #>               [,1] [,2]          [,3] [,4] #> [1,]  0.000000e+00  0.5 -7.071068e-01 -0.5 #> [2,] -7.071068e-01 -0.5  5.495324e-16 -0.5 #> [3,]  7.071068e-01 -0.5  7.850462e-17 -0.5 #> [4,]  4.440892e-16  0.5  7.071068e-01 -0.5 #>"},{"path":"/reference/spectral_distance.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the Spectral Distance Between Two Hypergraphs — spectral_distance","title":"Find the Spectral Distance Between Two Hypergraphs — spectral_distance","text":"Find Spectral Distance Two Hypergraphs","code":""},{"path":"/reference/spectral_distance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the Spectral Distance Between Two Hypergraphs — spectral_distance","text":"","code":"spectral_distance(hype1, hype2, matrix = \"laplacian\")"},{"path":"/reference/spectral_distance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the Spectral Distance Between Two Hypergraphs — spectral_distance","text":"hype1 hypergraph object hype2 hypergraph object matrix matrix calculate spectral distance respect . \"laplacian\", \"adjacency\", \"vert_norm_lap_mat\" \"hype_norm_lap_mat\"","code":""},{"path":"/reference/spectral_distance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the Spectral Distance Between Two Hypergraphs — spectral_distance","text":"number representing spectral distance two hypergraphs respect given matrix","code":""},{"path":"/reference/spectral_distance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find the Spectral Distance Between Two Hypergraphs — spectral_distance","text":"","code":"h1 <- example_hype() h2 <- example_hype() spectral_distance(h1, h2) #> Warning: laplacian_matrix finds the simplified support graph laplacian #> Warning: laplacian_matrix finds the simplified support graph laplacian #> [1] 0"},{"path":"/reference/spectral_distance_disc.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the Spectral Distance From the Fully Disconnected Hypergraph — spectral_distance_disc","title":"Find the Spectral Distance From the Fully Disconnected Hypergraph — spectral_distance_disc","text":"Find Spectral Distance Fully Disconnected Hypergraph","code":""},{"path":"/reference/spectral_distance_disc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the Spectral Distance From the Fully Disconnected Hypergraph — spectral_distance_disc","text":"","code":"spectral_distance_disc(hype, matrix = \"vert_norm_lap_mat\")"},{"path":"/reference/spectral_distance_disc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the Spectral Distance From the Fully Disconnected Hypergraph — spectral_distance_disc","text":"hype hypergraph object matrix matrix calculate spectra respect . \"vert_norm_lap_mat\" \"hype_norm_lap_mat\"","code":""},{"path":"/reference/spectral_distance_disc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the Spectral Distance From the Fully Disconnected Hypergraph — spectral_distance_disc","text":"spectral distance disconnected hypergraph","code":""},{"path":"/reference/spectral_distance_disc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find the Spectral Distance From the Fully Disconnected Hypergraph — spectral_distance_disc","text":"","code":"h <- example_hype() spectral_distance_disc(h) #> [1] 4"},{"path":"/reference/validate_hypergraph.html","id":null,"dir":"Reference","previous_headings":"","what":"Quickly Validate a Hypergraph — validate_hypergraph","title":"Quickly Validate a Hypergraph — validate_hypergraph","text":"using rhype functions, integrity hypergraph object remain intact. However, properties hypergraph object dependent one another, possible case error direct object manipulation user hypergraph object's integrity corrupted. cause rhype functions either throw errors calculate incorrect answers. function exhaustive perform multiple sanity checks hypergraph objects good place start debugging.","code":""},{"path":"/reference/validate_hypergraph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quickly Validate a Hypergraph — validate_hypergraph","text":"","code":"validate_hypergraph(hype, return = FALSE, verbose = TRUE)"},{"path":"/reference/validate_hypergraph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quickly Validate a Hypergraph — validate_hypergraph","text":"hype hypergraph object return logical variable stating whether output returned function verbose logical variable indicating whether function output text screen","code":""},{"path":"/reference/validate_hypergraph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quickly Validate a Hypergraph — validate_hypergraph","text":"Outputs text screen problems found within hypergraph object. return set TRUE logical output returned. logical output TRUE passed tests, FALSE failed test proves structure hypergraph broken NULL failed test hypergraphs used practically pass, necessarily mean hypergraph broken, see text output details.","code":""},{"path":"/reference/validate_hypergraph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quickly Validate a Hypergraph — validate_hypergraph","text":"","code":"h <- example_hype() validate_hypergraph(h) #>   There are 0 serious problems with this hypergraph: #>   There are 0 items that need your attention with this hypergraph: #>   These tests are not exhaustive, just an indication of where things might be going wrong."},{"path":"/reference/vert_norm_lap_mat.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the Vertex Normalised Laplacian Matrix of a Hypergraph — vert_norm_lap_mat","title":"Find the Vertex Normalised Laplacian Matrix of a Hypergraph — vert_norm_lap_mat","text":"defined Jurgen Jost Raffaella Mulas doi: 10.1016/j.aim.2019.05.025","code":""},{"path":"/reference/vert_norm_lap_mat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the Vertex Normalised Laplacian Matrix of a Hypergraph — vert_norm_lap_mat","text":"","code":"vert_norm_lap_mat(hype, as_matrix = TRUE)"},{"path":"/reference/vert_norm_lap_mat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the Vertex Normalised Laplacian Matrix of a Hypergraph — vert_norm_lap_mat","text":"hype hypergraph object as_matrix Whether coerce result simple matrix","code":""},{"path":"/reference/vert_norm_lap_mat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the Vertex Normalised Laplacian Matrix of a Hypergraph — vert_norm_lap_mat","text":"vertex normalised laplacian matrix hypergraph","code":""},{"path":"/reference/vert_norm_lap_mat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find the Vertex Normalised Laplacian Matrix of a Hypergraph — vert_norm_lap_mat","text":"","code":"h1 <- example_hype() vert_norm_lap_mat(h1) #> 4 x 4 Matrix of class \"dgeMatrix\" #>     v1 v2 v3  v4 #> v1 1.0  1  1 0.0 #> v2 0.5  1  1 0.5 #> v3 0.5  1  1 0.5 #> v4 0.0  1  1 1.0"},{"path":"/reference/vertex_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Vertex Names — vertex_names","title":"Get Vertex Names — vertex_names","text":"Takes hypergraph object returns names vertices.","code":""},{"path":"/reference/vertex_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Vertex Names — vertex_names","text":"","code":"vertex_names(hype)"},{"path":"/reference/vertex_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Vertex Names — vertex_names","text":"hype hypergraph object.","code":""},{"path":"/reference/vertex_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Vertex Names — vertex_names","text":"vector strings vertex names","code":""},{"path":"/reference/vertex_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Vertex Names — vertex_names","text":"","code":"h <- example_hype() vertex_names(h) #> [1] \"v1\" \"v2\" \"v3\" \"v4\""},{"path":"/reference/vertex_weights.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Vertex Weights — vertex_weights","title":"Get Vertex Weights — vertex_weights","text":"Takes hypergraph object returns weights associated vertices.","code":""},{"path":"/reference/vertex_weights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Vertex Weights — vertex_weights","text":"","code":"vertex_weights(hype)"},{"path":"/reference/vertex_weights.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Vertex Weights — vertex_weights","text":"hype hypergraph object.","code":""},{"path":"/reference/vertex_weights.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Vertex Weights — vertex_weights","text":"vector weights associated vertex. hypergraph weights associated vertices return NULL instead.","code":""},{"path":"/reference/vertex_weights.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Vertex Weights — vertex_weights","text":"","code":"h <- example_hype() vertex_weights(h) #> NULL"},{"path":"/news/index.html","id":"rhype-030","dir":"Changelog","previous_headings":"","what":"rhype 0.3.0","title":"rhype 0.3.0","text":"CRAN release: 2022-08-06 Changed spectral function calculate spectra adjacency matrix without using degree leading diagonal Added function calculate eigenvector centrality hypergraph Added getters find order size hypergraph","code":""}]
